# -*- coding: utf-8 -*-
#!/usr/bin/env python
"""
combined_query_daily.py
Version: PySpark / Python 2.7 compatible
Purpose: Generate short-term (3-day) OIM KPIs and write a local parquet report named by run date.
Notes:
 - This version fixes the access_days bug by counting DISTINCT days per (subscription_id, app_name, app_category).
 - Run without arguments => uses today's date as end date.
 - Run with one argument "YYYY-MM-DD" => recovery for that date.
"""

import sys
import os
import logging
from datetime import datetime, timedelta

from pyspark.sql import SparkSession
from pyspark.sql.functions import lit

# -----------------------
# Logging configuration
# -----------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger(__name__)

def main():
    spark = None
    try:
        # -----------------------
        # Spark session init
        # -----------------------
        spark = SparkSession.builder \
            .appName("Online_Model_Short_Term_Daily") \
            .config("spark.sql.caseSensitive", "false") \
            .config("hive.exec.dynamic.partition", "true") \
            .config("hive.exec.dynamic.partition.mode", "nonstrict") \
            .config("spark.sql.warehouse.dir", "/user/hive/warehouse") \
            .enableHiveSupport() \
            .master("yarn") \
            .getOrCreate()

        # -----------------------
        # Parse run date (default or recovery)
        # -----------------------
        if len(sys.argv) == 1:
            run_date_dt = datetime.now().date()
        elif len(sys.argv) == 2:
            try:
                run_date_dt = datetime.strptime(sys.argv[1], '%Y-%m-%d').date()
            except Exception:
                logger.error("Invalid date format. Use YYYY-MM-DD")
                spark.stop()
                sys.exit(1)
        else:
            logger.error("Usage: python combined_query_daily.py [YYYY-MM-DD]")
            spark.stop()
            sys.exit(1)

        # 3-day window (inclusive)
        st_to_date = run_date_dt.strftime('%Y-%m-%d')
        st_from_date = (run_date_dt - timedelta(days=2)).strftime('%Y-%m-%d')

        logger.info("Starting short-term run for %s to %s", st_from_date, st_to_date)

        # -----------------------
        # Corrected base SQL:
        # - aggregate per (subscription_id, app_name, app_category) across the 3-day window
        # - COUNT(DISTINCT day) used to compute access_days
        # -----------------------
        query = """
            WITH combined_data AS (
                SELECT
                    subscription_id,
                    app_name,
                    LOWER(TRIM(app_category)) AS app_category,
                    SUM(CAST(mbs AS DECIMAL(38,9))) AS total_mbs,
                    CAST(SUM(no_of_sessions) AS INT) AS total_sessions,
                    COUNT(DISTINCT day) AS access_days,
                    'app' AS type
                FROM hive.analytics_prod.online_interest_protocols_daily
                WHERE day BETWEEN '{from_date}' AND '{to_date}'
                GROUP BY subscription_id, app_name, LOWER(TRIM(app_category))

                UNION ALL

                SELECT
                    subscription_id,
                    app_name,
                    LOWER(TRIM(app_category)) AS app_category,
                    CAST(0 AS DECIMAL(38,9)) AS total_mbs,
                    SUM(no_of_sessions) AS total_sessions,
                    COUNT(DISTINCT day) AS access_days,
                    'url' AS type
                FROM hive.analytics_prod.online_interest_urls_daily
                WHERE day BETWEEN '{from_date}' AND '{to_date}'
                GROUP BY subscription_id, app_name, LOWER(TRIM(app_category))

                UNION ALL

                SELECT
                    subscription_id,
                    app_name,
                    LOWER(TRIM(app_category)) AS app_category,
                    CAST(0 AS DECIMAL(38,9)) AS total_mbs,
                    SUM(no_of_sessions) AS total_sessions,
                    COUNT(DISTINCT day) AS access_days,
                    'sms' AS type
                FROM hive.analytics_prod.online_interest_sms_daily
                WHERE day BETWEEN '{from_date}' AND '{to_date}'
                GROUP BY subscription_id, app_name, LOWER(TRIM(app_category))

                UNION ALL

                SELECT
                    subscription_id,
                    app_name,
                    LOWER(TRIM(app_category)) AS app_category,
                    CAST(0 AS DECIMAL(38,9)) AS total_mbs,
                    SUM(no_of_sessions) AS total_sessions,
                    COUNT(DISTINCT day) AS access_days,
                    'og' AS type
                FROM hive.analytics_prod.online_interest_og_calls_daily
                WHERE day BETWEEN '{from_date}' AND '{to_date}'
                GROUP BY subscription_id, app_name, LOWER(TRIM(app_category))
            ),
            category_counts AS (
                SELECT
                    app_category,
                    COUNT(*) AS interaction_count,
                    COUNT(DISTINCT subscription_id) AS sub_count,
                    MAX(access_days) AS max_access_days,
                    CAST(SUM(CASE WHEN type = 'app' THEN total_mbs ELSE 0 END) AS DECIMAL(38,9)) AS app_mbs
                FROM combined_data
                GROUP BY app_category
            )
            SELECT
                (SELECT COUNT(DISTINCT subscription_id) FROM combined_data) AS sub_id_counts,
                (SELECT COUNT(*) FROM combined_data) AS total_interactions,

                -- Online Shopping
                SUM(CASE WHEN app_category = 'online shopping' THEN interaction_count ELSE 0 END) AS online_shopping_counts,
                SUM(CASE WHEN app_category = 'online shopping' THEN sub_count ELSE 0 END) AS online_shopping_sub_counts,
                MAX(CASE WHEN app_category = 'online shopping' THEN max_access_days ELSE 0 END) AS online_shopping_access_days,
                SUM(CASE WHEN app_category = 'online shopping' THEN app_mbs ELSE 0 END) AS online_shopping_app_mbs,

                -- Travel
                SUM(CASE WHEN app_category = 'travel' THEN interaction_count ELSE 0 END) AS travel_flag_counts,
                SUM(CASE WHEN app_category = 'travel' THEN sub_count ELSE 0 END) AS travel_sub_counts,
                MAX(CASE WHEN app_category = 'travel' THEN max_access_days ELSE 0 END) AS travel_access_days,
                SUM(CASE WHEN app_category = 'travel' THEN app_mbs ELSE 0 END) AS travel_app_mbs,

                -- Foodies
                SUM(CASE WHEN app_category = 'foodies' THEN interaction_count ELSE 0 END) AS foodies_flag_counts,
                SUM(CASE WHEN app_category = 'foodies' THEN sub_count ELSE 0 END) AS foodies_sub_counts,
                MAX(CASE WHEN app_category = 'foodies' THEN max_access_days ELSE 0 END) AS foodies_access_days,
                SUM(CASE WHEN app_category = 'foodies' THEN app_mbs ELSE 0 END) AS foodies_app_mbs,

                -- Electronics and Computers
                SUM(CASE WHEN app_category = 'electronics and computers' THEN interaction_count ELSE 0 END) AS Electronics_and_Computers_counts,
                (SELECT COUNT(DISTINCT subscription_id) FROM combined_data WHERE app_category = 'electronics and computers' AND LOWER(app_name) NOT IN ('vodafone','orange','etisalat')) AS Electronics_and_Computers_sub_counts,
                MAX(CASE WHEN app_category = 'electronics and computers' THEN max_access_days ELSE 0 END) AS Electronics_and_Computers_access_days,

                -- Fashion
                SUM(CASE WHEN app_category = 'fashion' THEN interaction_count ELSE 0 END) AS fashion_flag_counts,
                SUM(CASE WHEN app_category = 'fashion' THEN sub_count ELSE 0 END) AS fashion_sub_counts,
                MAX(CASE WHEN app_category = 'fashion' THEN max_access_days ELSE 0 END) AS fashion_access_days,

                -- Mobile Store
                SUM(CASE WHEN app_category = 'mobile store' THEN interaction_count ELSE 0 END) AS Mobile_Store_flag_counts,
                SUM(CASE WHEN app_category = 'mobile store' THEN sub_count ELSE 0 END) AS Mobile_Store_sub_counts,
                MAX(CASE WHEN app_category = 'mobile store' THEN max_access_days ELSE 0 END) AS Mobile_Store_access_days,

                -- Grocery
                SUM(CASE WHEN app_category = 'grocery' THEN interaction_count ELSE 0 END) AS grocery_flag_counts,
                SUM(CASE WHEN app_category = 'grocery' THEN sub_count ELSE 0 END) AS grocery_sub_counts,
                MAX(CASE WHEN app_category = 'grocery' THEN max_access_days ELSE 0 END) AS grocery_access_days,

                -- Ride Booking
                SUM(CASE WHEN app_category = 'ride booking' THEN interaction_count ELSE 0 END) AS Ride_Booking_flag_counts,
                SUM(CASE WHEN app_category = 'ride booking' THEN sub_count ELSE 0 END) AS Ride_Booking_sub_counts,
                MAX(CASE WHEN app_category = 'ride booking' THEN max_access_days ELSE 0 END) AS Ride_Booking_access_days,
                SUM(CASE WHEN app_category = 'ride booking' THEN app_mbs ELSE 0 END) AS Ride_Booking_app_mbs,

                -- Online Learning
                SUM(CASE WHEN app_category = 'online learning' THEN interaction_count ELSE 0 END) AS Online_Learning_flag_counts,
                SUM(CASE WHEN app_category = 'online learning' THEN sub_count ELSE 0 END) AS Online_Learning_sub_counts,
                MAX(CASE WHEN app_category = 'online learning' THEN max_access_days ELSE 0 END) AS Online_Learning_access_days,
                SUM(CASE WHEN app_category = 'online learning' THEN app_mbs ELSE 0 END) AS Online_Learning_app_mbs,

                -- Medical
                SUM(CASE WHEN app_category = 'medical' THEN interaction_count ELSE 0 END) AS medical_flag_counts,
                SUM(CASE WHEN app_category = 'medical' THEN sub_count ELSE 0 END) AS medical_sub_counts,
                MAX(CASE WHEN app_category = 'medical' THEN max_access_days ELSE 0 END) AS medical_access_days,

                -- Lifestyle
                SUM(CASE WHEN app_category = 'lifestyle' THEN interaction_count ELSE 0 END) AS lifestyle_flag_counts,
                SUM(CASE WHEN app_category = 'lifestyle' THEN sub_count ELSE 0 END) AS lifestyle_sub_counts,
                MAX(CASE WHEN app_category = 'lifestyle' THEN max_access_days ELSE 0 END) AS lifestyle_access_days,

                -- Health (beauty)
                SUM(CASE WHEN app_category IN ('beauty') THEN interaction_count ELSE 0 END) AS Health_flag_counts,
                SUM(CASE WHEN app_category IN ('beauty') THEN sub_count ELSE 0 END) AS Health_sub_counts,
                MAX(CASE WHEN app_category IN ('beauty') THEN max_access_days ELSE 0 END) AS Health_access_days,

                -- Furniture
                SUM(CASE WHEN app_category IN ('furniture','furniture furnishing services') THEN interaction_count ELSE 0 END) AS furniture_furnishing_flag_counts,
                SUM(CASE WHEN app_category IN ('furniture','furniture furnishing services') THEN sub_count ELSE 0 END) AS furniture_furnishing_sub_counts,
                MAX(CASE WHEN app_category IN ('furniture','furniture furnishing services') THEN max_access_days ELSE 0 END) AS furniture_furnishing_access_days,

                -- Insurance
                SUM(CASE WHEN app_category = 'insurance' THEN interaction_count ELSE 0 END) AS insurance_flag_counts,
                SUM(CASE WHEN app_category = 'insurance' THEN sub_count ELSE 0 END) AS insurance_sub_counts,
                MAX(CASE WHEN app_category = 'insurance' THEN max_access_days ELSE 0 END) AS insurance_access_days,

                -- Education
                SUM(CASE WHEN app_category IN ('education','Education') THEN interaction_count ELSE 0 END) AS Education_flag_counts,
                SUM(CASE WHEN app_category IN ('education','Education') THEN sub_count ELSE 0 END) AS Education_sub_counts,
                MAX(CASE WHEN app_category IN ('education','Education') THEN max_access_days ELSE 0 END) AS Education_access_days,

                -- Entertainment
                SUM(CASE WHEN app_category = 'entertainment' THEN interaction_count ELSE 0 END) AS entertainment_flag_counts,
                SUM(CASE WHEN app_category = 'entertainment' THEN sub_count ELSE 0 END) AS entertainment_sub_counts,
                MAX(CASE WHEN app_category = 'entertainment' THEN max_access_days ELSE 0 END) AS entertainment_access_days,
                CAST(SUM(CASE WHEN app_category = 'entertainment' THEN app_mbs ELSE 0 END) AS DECIMAL(9,2)) AS entertainment_mbs

            FROM category_counts
        """.format(from_date=st_from_date, to_date=st_to_date)

        # -----------------------
        # Execute KPI query
        # -----------------------
        logger.info("Executing KPI aggregation query...")
        df_kpi = spark.sql(query)

        # Add report/run date column
        df_kpi = df_kpi.withColumn("report_date", lit(st_to_date))

        # -----------------------
        # Write local parquet file (overwrite for this run date)
        # -----------------------
        output_base = "/home/cadmin/Scripts/Analytics_Scripts/OIM_Short_Mid/output"
        if not os.path.exists(output_base):
            os.makedirs(output_base)

        output_path = os.path.join(output_base, "short_term_report_" + run_date_dt.strftime("%Y%m%d"))
        # write as parquet folder
        logger.info("Writing KPI parquet to %s (overwrite mode)", output_path)
        df_kpi.write.mode("overwrite").option("compression", "gzip").parquet(output_path)

        logger.info("Short-term KPI report written successfully to %s", output_path)

    except Exception as e:
        logger.error("Job failed: %s", str(e))
        raise
    finally:
        if spark:
            spark.stop()


if __name__ == "__main__":
    main()
